@using Kendo.Mvc.Grid.CRUD.Models;
@model IEnumerable<CustomerSearch>

<legend>Customers</legend>

@section Breadcrumb
{
<div class="breadcrumbs" id="breadcrumbs">
	<ul class="breadcrumb">
		<li>
			<i class="icon-home home-icon"></i>
			<a href="/Home">Home</a>

			<span class="divider">
				<i class="icon-angle-right arrow-icon"></i>
			</span>
		</li>

		<li class="active">Customers</li>

	</ul>

	<div class="nav-search" id="nav-search">
		<form class="form-search">
			<span class="input-icon">
				<input type="text" placeholder="Search ..." class="input-small nav-search-input" id="nav-search-input" autocomplete="off" />
				<i class="icon-search nav-search-icon"></i>
			</span>
		</form>
	</div>
</div>
}

<div class="span6" >
	<div id="grid"></div>

    <button class="btn btn-app btn-grey btn-mini radius-4" id="btnNew" name="button" value="add">
        <i class="icon-plus-sign"></i>
        New
    </button>

    <button class="btn btn-app btn-primary btn-mini radius-4" id="btnEdit" name="button" value="edit">
        <i class="icon-edit bigger-230"></i>
        Edit
    </button>

    <form id="deleteForm" class="inline">
        @Html.AntiForgeryToken()
        <button class="btn btn-app btn-danger btn-mini radius-4 move_to" id="btnDelete" name="button" value="delete">
            <i class="icon-trash bigger-160"></i>
            Delete
        </button>
    </form>

</div>

<div class="span4" >
	<p class="lead">Widgets Here</p>
</div>

<script>
    $(function ()
    {
        $("#grid").kendoGrid({
            height: 350,
            columns: [
                        { field: "CustomerID", hidden: true },  
                        { field: "AROrgName", title: "Customer Name", maxwidth: "20" },
                        { field: "ARCity", maxwidth: "40" },
                        { field: "State", title: "State" }
            ],
            editable: false,
            navigatable: true,
            pageable: true,
            sortable: true,
            filterable: true,
            selectable: "row",
            change: showDetails,

            dataSource: {
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
                pageSize: 10,
                schema: {
                    data: "Data",
                    total: "Total",
                    model: { // define the model of the data source. Required for validation and property types.
                        id: "CustomerID" ,
                        fields: {
                            CustomerID: { editable: false, nullable: false },
                            AROrgName: { type: "string", validation: { required: true } },
                            ARCity: { type: "string", validation: { required: true } },
                            ARStateProvID: { type: "int", validation: { required: true } },
                            CreatedDateTime: { editable: false, type: "datetime", nullable: true }
                        }
                    }
                },

                batch: false, // enable batch editing - changes will be saved when the user clicks the "Save changes" button
                transport:
                    {
                        read:
                            {
                                url: "@Url.Action("Read", "Customer")", //specify the URL which should return the records. This is the Read method of the HomeController.
                                contentType: "application/json",
                                type: "POST" //use HTTP POST request as by default GET is not allowed by ASP.NET MVC
                            },

                        parameterMap: function (data, operation)
                        {
                            if (operation != "read")
                            {
                                var result = {};

                                for (var i = 0; i < data.models.length; i++)
                                {
                                    var customer = data.models[i];

                                    for (var member in customer)
                                    {
                                        result["customers[" + i + "]." + member] = customer[member];
                                    }
                                }

                                return result;
                            }

                            else
                            {
                                return JSON.stringify(data)
                            }
                        }
                    }
            }
        });

    }); // End DOM ready //TELERIK GRID SCRIPT...


    //Set controller name for use by handle-grid-btn-events.js
    var controller = 'Customer';

</script>

@section Scripts
{
    <script src="~/Scripts/date-time/moment.min.js"></script>
    <script src="~/Scripts/custom/pr-date.js"></script>
    <script src="~/Scripts/custom/handle-grid-btn-events.js"></script>
}




